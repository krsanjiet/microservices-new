spring.application.name=order-services

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/orderservice
spring.datasource.username=springstudent
spring.datasource.password=springstudent
spring.jpa.hibernate.ddl-auto=update

server.port=8081

eureka.client.serviceUrl.defaultZone=http://eureka:password@localhost:8761/eureka/

management.health.circuitbreaker.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

#resilience 4j properties
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.inventory.event-consumed-buffered-size=true
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true

#timeout for relience4j
resilience4j.circuitbreaker.instances.inventory.timeout-duration=3s

#Resilience 4j retry property

resilience4j.retry.instances.inventory.max-attempts=3
resilience4j.retry.instances.inventory.wait-duration=5s


spring.zipkin.base-url=http://localhost:9411
#we want to send 100 % request
spring.sleuth.sampler.probability=1.0
spring.cloud.compatibility-verifier.enabled=false

#KAFKA PROPERTIES
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.template.default-topic=notificationTopic
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.type.mapping=event:com.programmingtechie.order_services.event.OrderPlacedEvent